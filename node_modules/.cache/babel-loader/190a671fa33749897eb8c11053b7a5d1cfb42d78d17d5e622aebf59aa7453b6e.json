{"ast":null,"code":"var _jsxFileName = \"/home/qb-kavyakarayil/Documents/chatbot/FE/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Room, RoomEvent } from \"livekit-client\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [room, setRoom] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const audioRef = useRef(null);\n  useEffect(() => {\n    // Initialize LiveKit room\n    const initializeRoom = async () => {\n      try {\n        const room = new Room({\n          adaptiveStream: true,\n          dynacast: true\n        });\n\n        // Handle room events\n        room.on(RoomEvent.Connected, () => {\n          console.log(\"Connected to room\");\n          setIsConnected(true);\n        });\n        room.on(RoomEvent.Disconnected, () => {\n          console.log(\"Disconnected from room\");\n          setIsConnected(false);\n        });\n\n        // Handle incoming audio from backend\n        room.on(RoomEvent.TrackSubscribed, (track, publication, participant) => {\n          console.log({\n            track,\n            publication,\n            participant\n          });\n          if (track.kind === \"audio\" && participant.identity === \"backend-bot\") {\n            console.log(\"Received audio from backend\");\n            const audioElement = audioRef.current;\n            if (audioElement) {\n              // Attach the track to the audio element\n              track.attach(audioElement);\n\n              // Ensure audio plays\n              const playAudio = async () => {\n                try {\n                  await audioElement.play();\n                  console.log(\"Audio playback started\");\n                } catch (error) {\n                  console.error(\"Error playing audio:\", error);\n                  // Try to play again if it failed\n                  if (error.name === \"NotAllowedError\") {\n                    console.log(\"Trying to play audio again...\");\n                    await audioElement.play();\n                  }\n                }\n              };\n\n              // Handle audio playback\n              audioElement.onloadedmetadata = () => {\n                playAudio();\n              };\n\n              // Handle track ended event\n              track.on(\"ended\", () => {\n                console.log(\"Audio track ended\");\n                audioElement.pause();\n              });\n\n              // Handle track muted event\n              track.on(\"muted\", () => {\n                console.log(\"Audio track muted\");\n              });\n\n              // Handle track unmuted event\n              track.on(\"unmuted\", () => {\n                console.log(\"Audio track unmuted\");\n                playAudio(); // Try to play again when unmuted\n              });\n            }\n          }\n        });\n        setRoom(room);\n\n        // Connect to room immediately after initialization\n        await connectToRoom();\n      } catch (error) {\n        console.error(\"Error initializing room:\", error);\n      }\n    };\n    initializeRoom();\n    return () => {\n      if (room) {\n        room.disconnect();\n      }\n    };\n  }, []);\n  const connectToRoom = async () => {\n    if (!room) return;\n    try {\n      const url = \"wss://chat-e7jp6qc0.livekit.cloud\";\n      const response = await fetch(\"http://localhost:5000/getToken\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const {\n        token\n      } = await response.json();\n      console.log({\n        token\n      });\n      await room.connect(url, token);\n    } catch (error) {\n      console.error(\"Error connecting to room\");\n      setMessages(prev => [...prev, {\n        type: \"error\",\n        content: \"Failed to connect to chat server. Please try again.\"\n      }]);\n    }\n  };\n  const startRecording = async () => {\n    if (!room || !isConnected) {\n      console.error(\"Not connected to room\");\n      return;\n    }\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const audioTrack = stream.getAudioTracks()[0];\n      console.log({\n        audioTrack\n      });\n      // Publish the audio track to LiveKit room\n      await room.localParticipant.publishTrack(audioTrack);\n      setIsRecording(true);\n      setMessages(prev => [...prev, {\n        type: \"user\",\n        content: \"Recording started\"\n      }]);\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n      setMessages(prev => [...prev, {\n        type: \"error\",\n        content: \"Failed to start recording. Please check microphone permissions.\"\n      }]);\n    }\n  };\n  const stopRecording = async () => {\n    if (!room || !isRecording) return;\n    try {\n      const publications = room.localParticipant.getTrackPublications();\n      for (const publication of publications) {\n        await room.localParticipant.unpublishTrack(publication.track);\n      }\n      setIsRecording(false);\n      setMessages(prev => [...prev, {\n        type: \"user\",\n        content: \"Recording stopped\"\n      }]);\n    } catch (error) {\n      console.error(\"Error stopping recording:\", error);\n      setMessages(prev => [...prev, {\n        type: \"error\",\n        content: \"Failed to stop recording.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-white bg-red-500 p-4 rounded-lg\",\n        children: \"Voice Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\",\n        children: isConnected ? \"Connected\" : \"Disconnected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-interface\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.type}`,\n            children: msg.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: !isConnected ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"connect-button\",\n            onClick: connectToRoom,\n            children: \"Connect to Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `record-button ${isRecording ? \"recording\" : \"\"}`,\n            onClick: isRecording ? stopRecording : startRecording,\n            children: isRecording ? \"Stop Recording\" : \"Start Recording\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        autoPlay: true,\n        playsInline: true,\n        controls: false,\n        style: {\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VIQlkoJN5HoCSOHHhLHgHsSC6aI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Room","RoomEvent","jsxDEV","_jsxDEV","App","_s","room","setRoom","isRecording","setIsRecording","messages","setMessages","isConnected","setIsConnected","audioRef","initializeRoom","adaptiveStream","dynacast","on","Connected","console","log","Disconnected","TrackSubscribed","track","publication","participant","kind","identity","audioElement","current","attach","playAudio","play","error","name","onloadedmetadata","pause","connectToRoom","disconnect","url","response","fetch","method","headers","ok","Error","status","token","json","connect","prev","type","content","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","audioTrack","getAudioTracks","localParticipant","publishTrack","stopRecording","publications","getTrackPublications","unpublishTrack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onClick","ref","autoPlay","playsInline","controls","style","display","_c","$RefreshReg$"],"sources":["/home/qb-kavyakarayil/Documents/chatbot/FE/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Room, RoomEvent } from \"livekit-client\";\nimport \"./App.css\";\n\nfunction App() {\n  const [room, setRoom] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const audioRef = useRef(null);\n\n  useEffect(() => {\n    // Initialize LiveKit room\n    const initializeRoom = async () => {\n      try {\n        const room = new Room({\n          adaptiveStream: true,\n          dynacast: true,\n        });\n\n        // Handle room events\n        room.on(RoomEvent.Connected, () => {\n          console.log(\"Connected to room\");\n          setIsConnected(true);\n        });\n\n        room.on(RoomEvent.Disconnected, () => {\n          console.log(\"Disconnected from room\");\n          setIsConnected(false);\n        });\n\n        // Handle incoming audio from backend\n        room.on(\n          RoomEvent.TrackSubscribed,\n          (track, publication, participant) => {\n            console.log({ track, publication, participant });\n            if (\n              track.kind === \"audio\" &&\n              participant.identity === \"backend-bot\"\n            ) {\n              console.log(\"Received audio from backend\");\n              const audioElement = audioRef.current;\n              if (audioElement) {\n                // Attach the track to the audio element\n                track.attach(audioElement);\n\n                // Ensure audio plays\n                const playAudio = async () => {\n                  try {\n                    await audioElement.play();\n                    console.log(\"Audio playback started\");\n                  } catch (error) {\n                    console.error(\"Error playing audio:\", error);\n                    // Try to play again if it failed\n                    if (error.name === \"NotAllowedError\") {\n                      console.log(\"Trying to play audio again...\");\n                      await audioElement.play();\n                    }\n                  }\n                };\n\n                // Handle audio playback\n                audioElement.onloadedmetadata = () => {\n                  playAudio();\n                };\n\n                // Handle track ended event\n                track.on(\"ended\", () => {\n                  console.log(\"Audio track ended\");\n                  audioElement.pause();\n                });\n\n                // Handle track muted event\n                track.on(\"muted\", () => {\n                  console.log(\"Audio track muted\");\n                });\n\n                // Handle track unmuted event\n                track.on(\"unmuted\", () => {\n                  console.log(\"Audio track unmuted\");\n                  playAudio(); // Try to play again when unmuted\n                });\n              }\n            }\n          }\n        );\n\n        setRoom(room);\n\n        // Connect to room immediately after initialization\n        await connectToRoom();\n      } catch (error) {\n        console.error(\"Error initializing room:\", error);\n      }\n    };\n\n    initializeRoom();\n\n    return () => {\n      if (room) {\n        room.disconnect();\n      }\n    };\n  }, []);\n\n  const connectToRoom = async () => {\n    if (!room) return;\n\n    try {\n      const url = \"wss://chat-e7jp6qc0.livekit.cloud\";\n\n      const response = await fetch(\"http://localhost:5000/getToken\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const { token } = await response.json();\n      console.log({ token });\n\n      await room.connect(url, token);\n    } catch (error) {\n      console.error(\"Error connecting to room\");\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"error\",\n          content: \"Failed to connect to chat server. Please try again.\",\n        },\n      ]);\n    }\n  };\n\n  const startRecording = async () => {\n    if (!room || !isConnected) {\n      console.error(\"Not connected to room\");\n      return;\n    }\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const audioTrack = stream.getAudioTracks()[0];\n      console.log({ audioTrack });\n      // Publish the audio track to LiveKit room\n      await room.localParticipant.publishTrack(audioTrack);\n\n      setIsRecording(true);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"user\",\n          content: \"Recording started\",\n        },\n      ]);\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"error\",\n          content:\n            \"Failed to start recording. Please check microphone permissions.\",\n        },\n      ]);\n    }\n  };\n\n  const stopRecording = async () => {\n    if (!room || !isRecording) return;\n\n    try {\n      const publications = room.localParticipant.getTrackPublications();\n      for (const publication of publications) {\n        await room.localParticipant.unpublishTrack(publication.track);\n      }\n      setIsRecording(false);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"user\",\n          content: \"Recording stopped\",\n        },\n      ]);\n    } catch (error) {\n      console.error(\"Error stopping recording:\", error);\n      setMessages((prev) => [\n        ...prev,\n        {\n          type: \"error\",\n          content: \"Failed to stop recording.\",\n        },\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"chatbot-container\">\n        <h1 className=\"text-2xl font-bold text-white bg-red-500 p-4 rounded-lg\">\n          Voice Chatbot\n        </h1>\n        <div className=\"connection-status\">\n          {isConnected ? \"Connected\" : \"Disconnected\"}\n        </div>\n        <div className=\"chat-interface\">\n          <div className=\"messages\">\n            {messages.map((msg, index) => (\n              <div key={index} className={`message ${msg.type}`}>\n                {msg.content}\n              </div>\n            ))}\n          </div>\n          <div className=\"controls\">\n            {!isConnected ? (\n              <button className=\"connect-button\" onClick={connectToRoom}>\n                Connect to Chat\n              </button>\n            ) : (\n              <button\n                className={`record-button ${isRecording ? \"recording\" : \"\"}`}\n                onClick={isRecording ? stopRecording : startRecording}\n              >\n                {isRecording ? \"Stop Recording\" : \"Start Recording\"}\n              </button>\n            )}\n          </div>\n        </div>\n        <audio\n          ref={audioRef}\n          autoPlay\n          playsInline\n          controls={false}\n          style={{ display: \"none\" }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}